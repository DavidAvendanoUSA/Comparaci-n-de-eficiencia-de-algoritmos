Análisis Comparativo: Factorial Recursivo e Iterativo en Python y C

Introducción
Esta tarea tiene como objetivo analizar y comparar la eficiencia de dos métodos para calcular el factorial de un número entero positivo *n*:

Método Recursivo: La función se llama a sí misma hasta alcanzar un caso base.

Método Iterativo: Utiliza un bucle para calcular el factorial de forma secuencial.

Se evaluarán ambos métodos en dos lenguajes: Python y C, con enfoque en el tiempo de ejecución y el consumo de memoria.

Descripción de las Implementaciones
En Python
Las funciones están implementadas de la siguiente manera:

facto_recursivo(n): Función recursiva que devuelve el factorial de *n*.

facto_iterativo(n): Función iterativa que calcula el factorial usando un ciclo for.

Para medir la eficiencia:

Se usa time.perf_counter() para calcular el tiempo.

Se utiliza la librería memory_profiler para monitorear el uso de memoria.

Los resultados se visualizan en gráficos generados con matplotlib.

En C
Las funciones equivalentes:

facto_r(int n): Cálculo recursivo del factorial.

facto_i(int n): Cálculo iterativo usando un bucle for.

Para la medición:

Tiempo medido con clock() de la librería <time.h>.

Memoria monitoreada con getrusage() de <sys/resource.h>.

Los resultados se imprimen directamente en la consola.

Herramientas y Dependencias
Requisitos para Python
Python 3.6 o superior.

Librerías necesarias:

memory_profiler

matplotlib

Instalación recomendada:

bash
pip install -r requirements.txt
Guía para Ejecutar el Código
Descarga el repositorio en tu dispositivo.

Instala las dependencias con:

bash
pip install -r requirements.txt

Ejecución en Python

Busca la carpeta con el archivo factorial.py usando el comando:
cd ruta_de_la_carpeta

Ejecuta el programa con:
python3 factorial.py


Ejecución en C

Busca la carpeta con el archivo factorial.c usando:
cd ruta_de_la_carpeta

Compila el programa con:
gcc factorial.c -o factorial

Ejecuta el programa con:
./factorial
